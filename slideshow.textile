!SLIDE cover
!TITLE Unix Efficiency!

h1.  Unix Efficiency

h2.  Steven G. Harms

h2.  (stharms@cisco.com)

!SLIDE
h1.  I dislike inefficiency.

!SLIDE
h1.  Proof:

!SLIDE
h1.  Dvorak Keyboard
!http://stevengharms.com(Dvorak Keyboard)!

* 1.5 miles for your fingers Dvorak v. QWERTY
* The shortcut that gets you home

!SLIDE

h1.  Inefficiency Hurts over the Long-Term

...add up all those minuscule inefficiencies that you do tens, hundreds, thousands of time per day and the results are surprising

!SLIDE

h1.  It hurts every day

!SLIDE

h1.  ...And it never stops hurting

!SLIDE
h1. Cisco

* Started in engineering support, lotta typing, lotta XTerm (er, dtterm)
* Sysadmin for email team: lotta typing, searching, saving bits of text
* Terminal addict

!SLIDE

Some magic spells that will help you shave off time from your regular CLI usage

!SLIDE

h1.  Measurement

bq. wc (-c|-l) (word count, count the bytes / lines)

!SLIDE

h1.  Use a decent shell (bash, zsh)

* Your shell is, in fact, a debugger session with a breakpoint at each carriage return
* You do this in $PROGRAMMING_LANG all day, do it in the shell, too
* Something that has key-bindings (set -o emacs, set -o vi)
* Something that uses the TAB key to expand paths, at the least

!SLIDE

h1.  Take advantage of shell built-in variables

* ~ (home)
* Set a variable for places you need to go often ($TC_HOME)
* Stack variables for maximum flexibility ($TC_BIN=$TC_HOME/bin)
* !! (Previous command line)
* !$ (Previous command's arguments)
* $* (The arguments)
* # (store something to recall later!  Handy for cut and pasting) 
* !(match) - execute a historical command that started with (match)
* Advanced:  Execute a subshell and insert its result: ``

!SLIDE

h1.  Use 'cd' properly (in bash)

* cd (go home)
* cd ~/bin (go to $HOME/bin)
* cd .. (go up a directory)
* cd ../../.. (go up three directories)
* cd - (go to the last directory, as a toggle)

!SLIDE

h1.  Create bash functions to do work you need to do often

* Remember, you're in a debugger + console.  Create functions to speed things up _at the command line_
* Simple functions may be better expressed as an alias 
* Combine functions with built-in variables

<div class="code">function zazzle(){ echo "A zazzle is summoned!" }<br/>
alias ll="ls -l"</div>



!SLIDE

h1.  Use awk to extract columnar data

* ls -l |awk '{print $5}' * print the 5th column, file sizes
* Use simple sed to do simple tranforms

!SLIDE

h1.  Use pagers, or pager-like things properly

* more
* more sucks, use less [use an alias?]
* head (gets the top five rows in a list)
* tail (gets the last five rows in a list)
* sort
* uniq
* sort + uniq == Unique results

!SLIDE

h1.  Use grep properly

* Basic:  grep something a_file
* Try grepping case insensitively -i
* Print out the file name that had a winner if you use a wildcard e.g. grep -iH zazzle *
* Get the line number where the match was found (-n)
* grep -v to exclude things

!SLIDE

h1.  Find a file from where you are 

h2.  "I know it's here somewhere..."

* find . -name "*.java"
* Advanced:  Use -exec to do something to the result....
	find . -name "*.java" -exec ls -l {} \;
	
!SLIDE

h1.  Change a file's contents

* and print it out.... perl -pe 's#foo#bar#g' file.txt
* and change it in the file...perl -i -pe 's#foo#bar#g' file.txt # this is silent!
* Gives you the full power of perl's regex engine (same as Python, Ruby, not same as emacs!)

!SLIDE

h1.  Transform a columnar list into a single row

* xargs

!SLIDE

h1.  Eponentiate power with "|"

# "Find all the java files"
# "Find all the java files that contain the word package"
# "Find all the java files that contain the word package, case insensitively, and find the size of that file"

!SLIDE

h1.  Bonus:  Use vi properly

h4.  When I see improper 'vi' use I die a little inside

h4.  Use 'vim' (alias vi to vim!)

!SLIDE

* vi (file)
* vi +32 (file) edit, starting at line 32
* Go to the start/end (gg/G)
* Start typing at a line under this one: o
* Start typing at a line above this one: O
* Go to the start/end of a line (^/$)
* Go to line 33:  33G
* Go forward a word (w)
* Do something n-times (n[something])
* Write macros to do complex work (qa: to create a macro, @a to run macro 'a')

!SLIDE

If it takes you more than 3 keystrokes, you're probably doing it wrong

!SLIDE

h1.  Use screen 

h2.  Get the power of many terminals in one, leave terminals resident

!SLIDE

When you sense that there's "gotta be a better way" invest in efficiency.  Life is too short for bad process.

